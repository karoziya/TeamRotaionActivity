@page "/"
@using TeamRotationActivity.Domain.Models;
@using TeamRotationActivity.Domain.Interfaces.Services

@inject ISaverService ActivitySaverService
@inject IRotationService RotationService


<h3>Activity</h3>

<button class="btn btn-primary" @onclick="LoadActivity">Load</button>
<button class="btn btn-primary" @onclick="SaveActivity">Save</button>
<button class="btn btn-primary" @onclick="Rotate">Rotate</button>
<button class="btn btn-primary" @onclick="CheckRotate">CheckRotate</button>
<hr />
@if (activities != null)
{
    @foreach (var activity in activities)
    {
        <h3>@activity.Name</h3>
        <p>@activity.Description</p>
        <p>Last change activity: @activity.LastRotation</p>
        <p>Next change activity: @activity.NextRotation</p>
        <p>Next activity will be at: @activity.ActivityDate</p>
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Order</th>
                    <th>Id</th>
                </tr>
            </thead>
            <tbody>
            @if (activity.Members != null)
            {
                foreach (var member in activity.Members)
                {
                    <tr>
                        <td>@member.Name @member.LastName</td>
                        <td>
                            <button class="btn" @onclick="() => Up(activity, member.Id)">up</button>
                            <button class="btn">down</button>
                        </td>
                        <td>@member.Id</td>
                    </tr>
                }
            }
            </tbody>
        </table>
    }
}

@code {

    private async Task LoadActivity()
    {
        var activitiesWorks = await ActivitySaverService.LoadActivitiesFromFileAsync();
        activities?.AddRange(activitiesWorks);
    }

    private async Task SaveActivity()
    {
        if (activities != null)
            await ActivitySaverService.SaveActivitiesAsync(activities);
    }

    private List<ActivityWork>? activities = new List<ActivityWork>();

    private void Up(ActivityWork activity, Guid id)
    {
        var members = activity.Members;
        var count = members?.Count;
        var currentMember = members?.Single(m => m.Id.Equals(id));
        if (currentMember != null)
        {
            var currentMemberIndex = members?.IndexOf(currentMember);
            members?.RemoveAt(currentMemberIndex!.Value);
            if (currentMemberIndex == 0 && count > 1)
                currentMemberIndex = (int)(count - 1);        
            members?.Insert(currentMemberIndex!.Value - 1, currentMember);
        }
    }

    private void Rotate()
    {
        if (activities != null)
        {
            RotationService.Rotate(activities.First());
        }
    }

    private void CheckRotate()
    {
        if (activities != null)
        {
            var needRotate = RotationService.NeedRotation(activities.First());
        }
    }


    protected override void OnInitialized()
    {
         // activities = await ActivitySaverService.LoadActivitiesFromFileAsync();

        //activities?.Add(ActivitySaverService.CreateActivities());
        //activities?.Add(ActivitySaverService.CreateActivities());
    }
}
